<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>http://www.qinyadan.com/2016/05/22/Userd/</url>
      <content type="html"><![CDATA[<p>高可用的工作心得分享</p>
<p>2016-04-29 翁乾村 井底之蛙</p>
<p>静态化，缓存化；</p>
<p>业务领域之中多少都有很多数据是“不变”，或固定时间内“不定的”，而这些数据在业务请求中又是常用的，“热点的”，比如收银台配置信息，渠道网关的参数信息，或是领域模型中的数据结构信息。这些数据一般散落或有序散落在数据库表结构之下，大可以在应用从容器中启动之初就加载入JVM或Cache，避免每次请求都要去读取DB，可以很大程度地提高服务性能。</p>
<p>运营化，后台化；</p>
<p>也是由第一点引出，当配置信息发生变更的时候怎么办？一般的方式是提SQL修改表记录，再去清除在Cache中的过期配置信息，再让这个生效的配置信息热加载到缓存去。这么做的坏处有两点，一是需要保证SQL的正确性，这点很重要；二是重复劳动。一种一劳永逸的办法就是后台化，将需要配置的信息后台化，如此增删改查的操作都会变得省心不少，还有一个好处是产品找你的机会少。</p>
<p>高可靠性——提早准备好业务降级策略；</p>
<p>理想是美好的，而现实总是残酷的。相信在每个开发的事业生涯总是会遇到很多“不幸”，比如数据库读写挂，数据库线程阻塞服务大量超时，你依赖的服务因为各种原因返回超时，缓存雪崩/击穿了等，如果没有一点点防备，那么你的服务也自然是跟着挂了，更不幸得是你的正确服务也可能受到连带影响。在这种情况下，服务降级往往能起到立竿见影的效果。降级的方案或手段有很多种，比如异常处理try{}catch，非关键路径下的开关，FastFail，FastOver等。</p>
<p>高可靠性——压测/流控/限流；</p>
<p>一般工作日饭点，或双休日饭点，或秒杀，或大促节日等，服务的访问量相较平常都会激增几倍或几十倍，如果服务能应付这些特殊节点，那么大部分情况下应该都会安全的。即使是你提供给别人的服务，也需要防止服务被异常突发流量调用所导致的影响。流量控制是预防这种情况的好办法。举个例子：517期间，我们做了一个支付提交的限流策略。当支付后台的待处理请求已超过当前能处理的范围时，返回前台排队提示，并随机产生一个排队倒计时，以减少再次提交产生的流量高峰。</p>
<p>高可靠性——超时时间/重试机制的选择；</p>
<p>这点从部门老大的某次分享会上取得，感觉非常有用。再举个例子，每次选择一个第三方支付工具去支付时，支付渠道都会去对应的第三方申请一个类似预订单号的唯一标识。如果正常情况下，这个第三方服务的响应时间是1s，但某天这个服务响应时间大面积超时，远超过1s，很快Load就是飙高，请求线程池被打满，整条服务链路响应都变得很慢。这种情况很可能是没有设置超时时间或者上下游设置了不当的超时时间导致。对此可以从几个方面考虑，一是每个服务提供方应当根据自身情况提供给服务请求方一个合理的超时时间范围，二每个服务调用方应基于服务链路的请求数和请求模式评估自身服务的正确服务响应时间范围，三善用超时重试机制，过度的重试容易让下游服务更加“措手不及”，四异步化，异步相比同步减少了无效时间的等待，提高了线程的服务效率。</p>
<p>高可用性——服务读写分离；</p>
<p>我们的业务应用大部分都是对数据的加工处理，比如订单数据的维护，优惠信息的查询，优惠资格的扣减等，对这些数据的加工处理基本都需要保持数据的ACID性，而大部分我们都在这一点交给数据库来保证，所以我们的架构一般都是两层是，上面是应用服务，下层是数据库。而上层的应用是无状态的，可以通过横向扩展来实现，瓶颈就落在了下层的数据库。当然下层的横向也可以通过分库分表来达到，但分库分表之后也会存在一些问题，比如增加了技术成本，如何选择分片策略，分布式事务如何保持数据一致性，或者一些历史原因。不管怎么样，回到单库的瓶颈，点评单库的架构是一主多从（2-3从），多从解决了数据库的读的高可用，而写的高可用则只依赖于主库。从应用服务的角度出发，如何能降低主库的风险呢？读写分离，将非实时读流量彻底从主库迁移到从库上去。实际的操作方式有以下几种，一拆分服务，将服务按照读写拆分，单独部署，如此读服务的压力完全由从主库承担；二通过中间件或DAL层，在SQL指定特定的读从库标记，在自定义的DAL层做区别，已分流这部分读流量。前者的好处是不依赖中间件就能做，但是需要早做；后者也是目前工程中的做法。最后一点说的有些乱，总结一句就是，“应用角度应尽早做好读写分离；善待主库”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[刘志敏的简历]]></title>
      <url>http://www.qinyadan.com/2016/05/22/resume/</url>
      <content type="html"><![CDATA[<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><hr>
<p>姓名： 刘志敏  </p>
<p>性别：男 </p>
<p>出生年月： 1990年06月08日 </p>
<p>毕业院校：<a href="http://www.cafuc.edu.cn/" target="_blank" rel="external">中国民用航空飞行学院</a> </p>
<p>籍贯：湖北 </p>
<p>现居地：北京西城区 </p>
<p>邮箱：aliuge0608@163.com </p>
<h1 id="职业技能"><a href="#职业技能" class="headerlink" title="职业技能"></a>职业技能</h1><hr>
<ol>
<li><p>java基础知识，熟悉java（反）序列化，IO，多线程等知识。</p>
</li>
<li><p>熟练使用springmvc、struts等框架进行开发。了解swing界面开发。</p>
</li>
<li><p>熟悉java常见的开发技术框架，能够利用开源技术解决常见的开发问题。例如：SOA（dubbo开发）、netty、zookeeper等。</p>
</li>
<li><p>熟悉web开发常见问题，能够编写shell脚本和简单web环境配置，熟悉nginx，tomcat等。</p>
</li>
<li><p>熟练使用关系型数据库，如：mysql，sql server；非关系型数据库，如：redis，memcache等。了解mongoDB，couchDB等。</p>
</li>
<li><p>了解hadoop生态环境的基本知识，使用hbase进行数据的存储等。</p>
</li>
<li><p>其他语言，能够利用 python，lua，shell 等进行简单问题的处理。</p>
</li>
<li><p>会使用消息中间件进行业务场景的处理，掌握activemq,rabbitmq,rocketmq,kafka等基本的使用。</p>
</li>
</ol>
<h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><hr>
<h3 id="北京祺正明翔技术装备有限公司（2012-07-2013-07）100-人"><a href="#北京祺正明翔技术装备有限公司（2012-07-2013-07）100-人" class="headerlink" title="北京祺正明翔技术装备有限公司（2012.07~2013.07）100+ 人"></a>北京祺正明翔技术装备有限公司（2012.07~2013.07）100+ 人</h3><ul>
<li>职位  项目经理助理兼java开发工程师</li>
<li>职责  负责辅助项目经理做需求调查、原型分析需求跟踪等；同时负责公司内部或对外开发ERP、OA、CRM等系统的开发维护</li>
<li>项目 </li>
</ul>
<blockquote>
<ol>
<li>耀莱奢侈品进销存管理系统<ul>
<li>简介<br>进销存管理系统是耀莱集团内部商品销售时的线上管理系统，综合商品出入库，商品销售，统计管理和门店管理以及财务清算为一体的管理系统。<br>大大节省了人力工作以及方便直观的管理维护。</li>
<li>职责</li>
</ul>
<ol>
<li>负责配合项目经理进行需求分析和原型制作。</li>
<li>负责商品销售统计分析。</li>
<li>门店数据的收集和维护开发。</li>
</ol>
</li>
</ol>
<ol>
<li>高尔夫俱乐部管理系统<ul>
<li>简介</li>
<li>职责</li>
</ul>
</li>
</ol>
<ol>
<li>GE（通用医疗）CTPMS管理系统<ul>
<li>简介</li>
<li>职责</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="北京立新盈企大数据技术股份有限公司（2013-07-2016-03）50-100-人"><a href="#北京立新盈企大数据技术股份有限公司（2013-07-2016-03）50-100-人" class="headerlink" title="北京立新盈企大数据技术股份有限公司（2013.07~2016.03）50-100 人"></a>北京立新盈企大数据技术股份有限公司（2013.07~2016.03）50-100 人</h3><ul>
<li>职位 java开发工程师转技术主管</li>
<li>职责 开发项目系统和java开发组管理</li>
<li>项目 </li>
</ul>
<blockquote>
<ol>
<li><p>数据共享平台</p>
<ul>
<li>简介<br>提供数据分享和共享的平台。主要有2大类资源数据，一类是常规数据，包含文档，图片等；二类是数据库表数据。</li>
<li>职责</li>
</ul>
<ol>
<li>负责该平台后台管理的开发，包含数据的审核，举报的开发。</li>
<li>数据库表数据前端调用接口的实现和权限付费计算的开发。</li>
</ol>
</li>
<li><p>微生物词典检索项目</p>
<ul>
<li>简介<br>微生物信息检索网是中国农科院负责对外公开的信息平台。实现研究信息的共享和学术信息的公开服务等。</li>
<li>职责</li>
</ul>
<ol>
<li>负责微生物词典检索功能的线上实现。主要是数据的导入和线上全文检索功能。</li>
</ol>
</li>
<li><p><a href="http://www.jinshaninno.com" target="_blank" rel="external">鄂尔多斯(金山)技术交易与转移平台</a></p>
<ul>
<li>简介</li>
<li>职责</li>
</ul>
</li>
<li><p><a href="http://www.tusooo.com/" target="_blank" rel="external">图说美物可视化购物平台</a></p>
<ul>
<li>简介<br>图说美物是一个导购社交化的电商平台。目前主要实现了B2C，O2O的模式。主要的经营业务有：<br>线上商品批发（B2C），线下导购（O2O，针对门店商家和用户），其他搜索导购业务。</li>
<li>职责</li>
</ul>
<ol>
<li>负责平台架构的搭建和技术定型。</li>
<li>负责项目业务开发的需求沟通和开发组管理。</li>
<li>负责核心模块的技术开发。包含消息通知的消息中间件的使用封装、redis缓存使用、SOA模块化接口的规范制定等</li>
<li>负责openfire聊天服务器的配置安装，二次插件开发</li>
</ol>
</li>
</ol>
</blockquote>
<h1 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h1><p><a href="mailto:aliuge0608@163.com" target="_blank" rel="external">我的邮箱</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://www.qinyadan.com/2016/05/22/about/</url>
      <content type="html"><![CDATA[<h2 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h2><p><em>*</em> 在自己有时间的时候记录下或者收集其他优秀前辈的智慧结晶。</p>
<pre><code>1. 记录生活的点滴
2. 记录java学习的历程
3. 架构
4. 管理和情商
5. 唠叨和抱怨
</code></pre><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p><em>*</em> 出生在90年为自己生活奋斗的青年</p>
<ul>
<li><a href="http://liuzm.github.io/resume/" target="_blank" rel="external">我的个人简历</a></li>
</ul>
<h2 id="擅长领域"><a href="#擅长领域" class="headerlink" title="擅长领域"></a>擅长领域</h2><pre><code>1. java的基础知识
2. 进阶的java
3. 框架
4. 电商和金融业务
5. 传统的业务（ERP，CRM，OA...）
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[netty 的时间轮训算法]]></title>
      <url>http://www.qinyadan.com/2016/05/22/netty-timerWheel/</url>
      <content type="html"><![CDATA[<h2 id="Hashed-and-Hierarchical-Timing-Wheels-Efficient"><a href="#Hashed-and-Hierarchical-Timing-Wheels-Efficient" class="headerlink" title="Hashed and Hierarchical Timing Wheels: Efficient"></a>Hashed and Hierarchical Timing Wheels: Efficient</h2><p>Data Structures for Implementing a Timer Facility</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[netty的Reactor线程模型]]></title>
      <url>http://www.qinyadan.com/2016/05/22/netty-reactor/</url>
      <content type="html"><![CDATA[<h2 id="NioEventLoop"><a href="#NioEventLoop" class="headerlink" title="NioEventLoop"></a>NioEventLoop</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[netty长连接和短连接的维护和管理]]></title>
      <url>http://www.qinyadan.com/2016/05/22/netty-keepalive/</url>
      <content type="html"><![CDATA[<h2 id="netty的C-S架构，维护和管理client端的连接"><a href="#netty的C-S架构，维护和管理client端的连接" class="headerlink" title="netty的C/S架构，维护和管理client端的连接"></a>netty的C/S架构，维护和管理client端的连接</h2><ul>
<li>在内存中维护一份连接表</li>
</ul>
<blockquote>
<ol>
<li>由server端定时扫描，清理掉无效的客户端连接</li>
<li>client重写触发方法，事件触发时维护连接表</li>
</ol>
</blockquote>
<ul>
<li>本地维护一份连接表，定时轮训和心跳机制，保持短连接，需要的时候建立连接</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[记录学习和生活]]></title>
      <url>http://www.qinyadan.com/2016/05/22/life/</url>
      <content type="html"><![CDATA[<blockquote>
<p>  从博客出生到现在一直都想做一个记录自己生活和学习的网站。就算有自己搭建的，也写过但是一直没有坚持下来,慢慢的也就没有了兴趣。<br>作为程序员很有习惯性的思维，那怕写一篇随感都要有个12345的列表。</p>
<ol>
<li><p>关于生活和情商<br> 很多时候困扰我们的是不得已的一些事情，工作、朋友、家人等等。<br> 当你面对这些事的时候，你会去想朋友是否在意你的做法和决定。我这样做家人是否为我担心等等。</p>
</li>
<li><p>关于学习<br> 除了工作之外，我们很多时候会去学习自己感兴趣的知识。<br> 怎么学习？</p>
</li>
</ol>
<ol>
<li>关于规划<br> 很多时候我挂在口边的一句话是：我不想一直给别人打工。<br> 如何自己创建事业。</li>
</ol>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自旋锁]]></title>
      <url>http://www.qinyadan.com/2016/05/22/tools-lock/</url>
      <content type="html"><![CDATA[<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><pre><code>自旋锁（SpinLock） ：是指一个线程在获取锁的时候，如果锁已经被其他线程持有，那么该线程将循环
等待，然后不断的判断是否能够被成功获取，直到获取锁才会退出循环。
该获取锁的线程一直处于活跃状态，但是并没有执行任何有效的任务，使用这种锁会造成busy waiting。
</code></pre><blockquote>
<p>案例：</p>
</blockquote>
<pre><code>public class SpinLock{

    private AtomicReference&lt;Thread&gt; cas = new AtomicReference&lt;Thread&gt;();

    public void lock(){
        Thread current = Thread.currentThread(); // 获取cas
        while(!cas.compareAndSet(null,current)){
        // do nothing
        }
    }
    public void unlock(){
        Thread current = Thread.currentThread();
        cas.compareAndSet(current,null);
    }
}
</code></pre><blockquote>
<p>优缺点:</p>
<pre><code>1. 如果某个线程持有锁的时间过长，就会导致其他等待获取锁的线程进入循环等待，消耗CPU等资源。使用不当会造成CPU使用率过高。
2. 上述java实现的自旋锁是不公平的锁，无法满足等待时间最长的线程优先获取到锁。不公平的锁就会存在“线程饥饿”的问题。
3. 自旋锁不会使线程状态发生切换，一直处于用户态，即所谓的线程一直都是active的；不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快。
4. 非自旋锁在获取不到锁的时候就会进入阻塞状态，从而进入内核态，当获取到锁的时候需要从内核态恢复，需要进行上下文切换。
</code></pre></blockquote>
<h2 id="可重入和不可重入的自旋锁"><a href="#可重入和不可重入的自旋锁" class="headerlink" title="可重入和不可重入的自旋锁"></a>可重入和不可重入的自旋锁</h2><h2 id="自旋锁的变种"><a href="#自旋锁的变种" class="headerlink" title="自旋锁的变种"></a>自旋锁的变种</h2><blockquote>
<ol>
<li>TicketLock</li>
</ol>
<p>2.CLHLock</p>
<p>3.MCSLock</p>
</blockquote>
<h2 id="自旋锁和互斥锁"><a href="#自旋锁和互斥锁" class="headerlink" title="自旋锁和互斥锁"></a>自旋锁和互斥锁</h2><pre><code>1. 自旋锁与互斥锁都是为了实现保护资源共享的机制。
2. 无论是自旋锁还是互斥锁，在任意时刻都最多只有一个持有者。
3. 获取互斥锁的线程，如果锁已经被占有，则该线程进入睡眠状态；获取自旋锁的线程不会睡眠，而是一直循环等待锁释放。
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[futuretask 源码分析]]></title>
      <url>http://www.qinyadan.com/2016/05/22/jvm-futuretask/</url>
      <content type="html"><![CDATA[<h2 id="futuretask-源码分析"><a href="#futuretask-源码分析" class="headerlink" title="futuretask 源码分析"></a>futuretask 源码分析</h2>]]></content>
    </entry>
    
  
  
</search>
